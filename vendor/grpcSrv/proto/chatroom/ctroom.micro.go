// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ctroom.proto

package chatroom

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chatroom service

type ChatroomService interface {
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Distroy(ctx context.Context, in *DistroyRequest, opts ...client.CallOption) (*Response, error)
	GagAdd(ctx context.Context, in *GagAddRequest, opts ...client.CallOption) (*Response, error)
	GagRemove(ctx context.Context, in *GagRemoveRequest, opts ...client.CallOption) (*Response, error)
}

type chatroomService struct {
	c    client.Client
	name string
}

func NewChatroomService(name string, c client.Client) ChatroomService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chatroom"
	}
	return &chatroomService{
		c:    c,
		name: name,
	}
}

func (c *chatroomService) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Chatroom.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatroomService) Distroy(ctx context.Context, in *DistroyRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Chatroom.Distroy", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatroomService) GagAdd(ctx context.Context, in *GagAddRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Chatroom.GagAdd", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatroomService) GagRemove(ctx context.Context, in *GagRemoveRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Chatroom.GagRemove", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chatroom service

type ChatroomHandler interface {
	Create(context.Context, *Request, *Response) error
	Distroy(context.Context, *DistroyRequest, *Response) error
	GagAdd(context.Context, *GagAddRequest, *Response) error
	GagRemove(context.Context, *GagRemoveRequest, *Response) error
}

func RegisterChatroomHandler(s server.Server, hdlr ChatroomHandler, opts ...server.HandlerOption) error {
	type chatroom interface {
		Create(ctx context.Context, in *Request, out *Response) error
		Distroy(ctx context.Context, in *DistroyRequest, out *Response) error
		GagAdd(ctx context.Context, in *GagAddRequest, out *Response) error
		GagRemove(ctx context.Context, in *GagRemoveRequest, out *Response) error
	}
	type Chatroom struct {
		chatroom
	}
	h := &chatroomHandler{hdlr}
	return s.Handle(s.NewHandler(&Chatroom{h}, opts...))
}

type chatroomHandler struct {
	ChatroomHandler
}

func (h *chatroomHandler) Create(ctx context.Context, in *Request, out *Response) error {
	return h.ChatroomHandler.Create(ctx, in, out)
}

func (h *chatroomHandler) Distroy(ctx context.Context, in *DistroyRequest, out *Response) error {
	return h.ChatroomHandler.Distroy(ctx, in, out)
}

func (h *chatroomHandler) GagAdd(ctx context.Context, in *GagAddRequest, out *Response) error {
	return h.ChatroomHandler.GagAdd(ctx, in, out)
}

func (h *chatroomHandler) GagRemove(ctx context.Context, in *GagRemoveRequest, out *Response) error {
	return h.ChatroomHandler.GagRemove(ctx, in, out)
}
