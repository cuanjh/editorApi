// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rcIm.proto

package im

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Msg service

type MsgService interface {
	Publish(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	System(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Broadcast(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Custom(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Chatroom(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	ChatroomCustome(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type msgService struct {
	c    client.Client
	name string
}

func NewMsgService(name string, c client.Client) MsgService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "im"
	}
	return &msgService{
		c:    c,
		name: name,
	}
}

func (c *msgService) Publish(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Msg.Publish", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgService) System(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Msg.System", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgService) Broadcast(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Msg.Broadcast", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgService) Custom(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Msg.Custom", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgService) Chatroom(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Msg.Chatroom", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgService) ChatroomCustome(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Msg.ChatroomCustome", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Msg service

type MsgHandler interface {
	Publish(context.Context, *Request, *Response) error
	System(context.Context, *Request, *Response) error
	Broadcast(context.Context, *Request, *Response) error
	Custom(context.Context, *Request, *Response) error
	Chatroom(context.Context, *Request, *Response) error
	ChatroomCustome(context.Context, *Request, *Response) error
}

func RegisterMsgHandler(s server.Server, hdlr MsgHandler, opts ...server.HandlerOption) error {
	type msg interface {
		Publish(ctx context.Context, in *Request, out *Response) error
		System(ctx context.Context, in *Request, out *Response) error
		Broadcast(ctx context.Context, in *Request, out *Response) error
		Custom(ctx context.Context, in *Request, out *Response) error
		Chatroom(ctx context.Context, in *Request, out *Response) error
		ChatroomCustome(ctx context.Context, in *Request, out *Response) error
	}
	type Msg struct {
		msg
	}
	h := &msgHandler{hdlr}
	return s.Handle(s.NewHandler(&Msg{h}, opts...))
}

type msgHandler struct {
	MsgHandler
}

func (h *msgHandler) Publish(ctx context.Context, in *Request, out *Response) error {
	return h.MsgHandler.Publish(ctx, in, out)
}

func (h *msgHandler) System(ctx context.Context, in *Request, out *Response) error {
	return h.MsgHandler.System(ctx, in, out)
}

func (h *msgHandler) Broadcast(ctx context.Context, in *Request, out *Response) error {
	return h.MsgHandler.Broadcast(ctx, in, out)
}

func (h *msgHandler) Custom(ctx context.Context, in *Request, out *Response) error {
	return h.MsgHandler.Custom(ctx, in, out)
}

func (h *msgHandler) Chatroom(ctx context.Context, in *Request, out *Response) error {
	return h.MsgHandler.Chatroom(ctx, in, out)
}

func (h *msgHandler) ChatroomCustome(ctx context.Context, in *Request, out *Response) error {
	return h.MsgHandler.ChatroomCustome(ctx, in, out)
}
